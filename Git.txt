※ SCM(Software Configuration management) : 소프트웨어 형상 관리
    - 소프트웨어의 변경사항을 추적하고 통제하는 작업
    - Subversion, git, ...

1. 설치
    - https://git-scm.com

2. git 프로그램 실행 방식
    (1) CUI(CLI)
        - 윈도우의 cmd(명령프롬프트), 파워쉘
        - 리눅스의 Bash Shell

    (2) GUI(Window) 이건 좀 별로임;
        - SourceTree, TortoiseGUI, 각 IDE에 내장되어 있는 plugin

3. 로컬에서 실습
    (1) git을 설치하고 가장 먼저 해야할 일(환경 설정)

    (2) Bash Shell로 들어가서 git 명령어 사용; 설치 확인하기;

    (3) git config --list; 환경설정 보기

    (4) $ git config --gloval user.name "wjdahr12"
        $ git config --global user.email "wjdhar12@gmail.com"
            - 사용자 이름과, 이메일 등록

    (5) 프로젝트 초기화
        1) 프로젝트 폴더로 이동
        2) git init

    (6) 세 가지 상태
        1) Working Directory 상태
            git status -> Untracked files ... ; 준비가 안된 상태

        2) Staging Area 상태
            git add 파일명
            git add 파일명, 파일명
            git add *.txt, *.gif, a*.*
            git add --all 또는 git add .

            git status -> Changes to be committed

            git rm --cached test1.txt -> Untracked files로 다시 내리기

            - 무대 위로 올려놨는데 그 텍스트를 수정하거나 변경하면 저장을 해도 
              무대 위에서 내려온 상태가 됨;
                - 그때 git add . -> 무대 위로 올라감

            - git diff; 수정 전과 후의 내용을 알려줌


        3) Commit 상태
            - git commit
            - git commit -m "두번째 커밋입니다."
                - commit으로 들어가기전에 미리 메모할 수 있는 명령어

            - i를 치면 입력 가능
            - #; 주석에 입력 금지;
            - :wq 저장하고 빠져나오기

            - git log; 저장소의 커밋 히스토리를 시간순으로 보여줌

    * 알아야 할 명령어
        - q누르면 빠져나오기 가능;
        - shift+insert 복사됨
        
4. 원격에서 실습
    - 직접 서버를 구축
    - 웹서버 업체 이용: github, bitbucket, gitlab, codebase, cloudforge,...

    (1) Remote Repository 준비
        - https://github.com/wjdahr12/FirstProject.git ; 프로젝트 주소

    (2) 원격으로 연결된 저장소(서버) 확인
        git remote
        git remote -v; 훨씬 더 자세한 정보

    (3) 원격 연결
        git remote add <별명> <서버주소>
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        git remote add origin https://github.com/wjdahr12/FirstProject.git

    (4) Remote Repository로 업로드(소스 올리기)
        git push <업로드할 서버 주소> <올릴 데이터가 있는 장소 이름>
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        git push origin master

    (5) Remote Repository에서 다운로드(소스 가져오기)
        1) git pull <다운로드할 서버주소> <데이터를 받을 장소>
                pull: fetch + merge;
                       받기  + 합치기
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        git pull origin master

        2)
        git fetch <다운로드할 서버주소> <데이터를 받을 장소>
        git merge <합칠 데이터 주소>; FETCH_HEAD-> 이안에 데이터 임시저장됨
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        git fetch origin master
        git merge FETCH_HEAD

        3) git clone <서버주소>
            - 깃허브에 코드버튼을 눌러서 서버주소 구하기
        
5. Branch
    - git tag
    - git branch: 브랜치 정보 보기
    - git branch <브랜치명>: 브랜치 만들기
    - git checkout <branch 명>: 브랜치 전환
    - git checkout -b <브랜치명>: 브랜치 만들고 전환
    - checkout으로 분기명 바꾸면 그 분기에서 저장된 데이터만 보임
    - git log --oneline --decorate --graph --all
        - 분기 포인터가 어디에 있고 기록이 어떻게 달라졌는지 보여줌
    - git branch hotfix로 하나 생성
    - git checkout hotfix로 분기명 바꾸고 수정본 작성
    - git checkout master로 돌아간 후
    - git merge hotfix로 합치기
    - 합치면 log로 한번 확인; head-> master, hotfix
    - git branch -d hotfix를 하게되면 마스터로 수정되는 결과 생성
    - git branch -d <브랜치명>: 브랜치 삭제
    - git commit --amend; commit 메시지 수정
    - git push --delete <서버주소> <브랜치명>: 원격으로 브랜치 삭제

6. 협업
    (1) Fork
        - https://github.com/octocat/Spoon-Knife.git
    
    (2) Colaboration
        - 팀장은 remote Repository 생성 후 팀원 초대
        - 팀장은 기본 템플릿을 작성해서 업로드
        - 팀원들은 템플릿을 다운로드 받아 브랜치를 생성하여 임의의 작업 수행
            - 처음에는 clone으로 받고 그 다음부터는 pull로 받는다
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        - 팀원들은 임의의 작업을 수행 후 브랜치 업로드
        - 팀장은 팀원들의 브랜치를 받아서 merge 후 다시 master 업로드
        - 팀원들은 자기가 올린 브랜치를 삭제 후 확인
            - 반드시 팀장이 merge했다는 메시지를 받은 후 삭제

7. gitignore 파일 작성


8. README.md 파일 작성